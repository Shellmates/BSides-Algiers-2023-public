#!/usr/bin/env python3

from string import printable

buff = [
  0xa3, 0x97, 0xa2, 0x55, 0x53, 0xbe, 0xf1, 0xfc, 0xf9, 0x79,
  0x6b, 0x52, 0x14, 0x13, 0xe9, 0xe2, 0x2d, 0x51, 0x8e, 0x1f,
  0x56, 0x08, 0x57, 0x27, 0xa7, 0x05, 0xd4, 0xd0, 0x52, 0x82,
  0x77, 0x75, 0x1b, 0x99, 0x4a
]

key = [
  0xd2, 0xff, 0x8e, 0x39, 0x70, 0xd3, 0xea, 0x88, 0x06, 0x0a,
  0x68, 0x15, 0xad, 0x4c, 0x9e, 0xad, 0x1d, 0x0e, 0x85, 0x2b,
  0x35, 0x38, 0x8c, 0x6e, 0x7a, 0x40, 0x19, 0x8f, 0x1b, 0xb3,
  0x8e, 0x34, 0x07, 0xfd, 0x4d
]

def GF_mul(Byte1, Byte2):
  a = Byte1
  b = Byte2
  product = 0

  for i in range(8):
      if (b & 1) == 1: 
          product = product ^ a
      hi_bit_set = a & 0x80
      a = (a << 1) & 0xFF
      if hi_bit_set == 0x80:
          a = a ^ 0x1B
      b >>= 1

  return product

def xor(Byte1, Byte2):
  return Byte1 ^ Byte2 


def BF_char(KeyChar, BuffChar):
    for char in printable:
        if(KeyChar == GF_mul(ord(char), BuffChar)):
            return char

if __name__ == "__main__":
    flag = ""

    for i in range(len(key)):
        if i % 2 == 0:
            flag += BF_char(key[i], buff[i])
        else:
            flag += chr(xor(key[i], buff[i])) 

    print(flag)


    
